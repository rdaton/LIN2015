//https://seeklinwin.wordpress.com/2011/05/13/device-driver-5kfifo-producer-and-consumer-in-kernel/
//https://stuff.mit.edu/afs/sipb/contrib/linux/samples/kfifo/record-example.c

#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/proc_fs.h>
#include <linux/string.h>
#include <linux/vmalloc.h>
#include <linux/vmalloc.h>
#include <asm-generic/uaccess.h>
#include <asm-generic/errno.h>
#include <linux/semaphore.h>
#include <linux/kfifo.h>
MODULE_LICENSE("GPL");

//#define MAX_CBUFFER_LEN  64
#define FIFO_SIZE	64
#define MAX_KBUF  64
typedef STRUCT_KFIFO_REC_2(FIFO_SIZE) tipoKfifo;	
static tipoKfifo unKFifo; /* Buffer circular */


static struct proc_dir_entry *proc_entry; 
int prod_count = 0; /* Número de procesos que abrieron la entrada /proc para escritura (productores) */ 
int cons_count = 0; /* Número de procesos que abrieron la entrada /proc para lectura (consumidores) */ 
struct semaphore mtx; /* para garantizar Exclusión Mutua */ 
struct semaphore sem_prod; /* cola de espera para productor(es) */ 
struct semaphore sem_cons; /* cola de espera para consumidor(es) */ 
int nr_prod_waiting=0; /* Número de procesos productores esperando */ 
int nr_cons_waiting=0; /* Número de procesos consumidores esperando */

//struct inode *inode, struct file *file
/* Se invoca al hacer open() de entrada /proc */ 
static int fifoproc_open(struct inode *inode, struct file *file)
{
    
   
     if (down_interruptible(&mtx))
        {
        return -EINTR;
        }

    if (file->f_mode & FMODE_READ)  
    { /* Un consumidor abrió el FIFO */
      /* Acceso a la crítica */
     
       cons_count++;
       
        /* Bloquearse mientras no haya productor preparado */
        while (prod_count<=0)
        {
          /* Incremento de consumidores esperando */
          nr_cons_waiting++;
          up(&mtx);
         
          /* Bloqueo en cola de espera */   
          if (down_interruptible(&sem_cons)){  
           
             down(&mtx);
            nr_cons_waiting--;
            up(&mtx);
            return -EINTR;
          }
            if(down_interruptible(&mtx))
            {
              return -EINTR;
            }     
        }
        /* Despertar a los productores bloqueados (si hay alguno) */
        while (nr_prod_waiting>0)
        {
          up(&sem_prod);  
          nr_prod_waiting--;
        }
    } 
    else
    { /* Un productor abrió el FIFO */
      if (file->f_mode & FMODE_WRITE) 
      { /* Un consumidor abrió el FIFO */
          prod_count++;
          /* Bloquearse mientras no haya consumidor preparado */
          while (cons_count<=0)
          {
            /* Incremento de productores esperando */
            nr_prod_waiting++;
             up(&mtx);
            /* Bloqueo en cola de espera */   
            if (down_interruptible(&sem_prod)){
              down(&mtx);
              nr_prod_waiting--;
              up(&mtx); 
              return -EINTR;
            }
            if (down_interruptible(&mtx)){return -EINTR;} 
          }
          /* Despertar a los consumidores bloqueados (si hay alguno) */
          if (nr_cons_waiting>0)
          {
          up(&sem_cons);  
          nr_cons_waiting--;
          }
      }

  /* Salir de la sección crítica */
    }
  up(&mtx);
  return 0;

}



/* Se invoca al hacer close() de entrada /proc */ 
static int fifoproc_release(struct inode *inodo, struct file *file)
{
  down(&mtx);
  if (file->f_mode & FMODE_WRITE){
    prod_count--;
    up(&sem_prod);
     
  }
  else if (file->f_mode & FMODE_READ){
    cons_count--;
    up(&sem_cons);
    
  }

  if (cons_count==0 && prod_count==0) 
  {         
       kfifo_free(&unKFifo);
  } 

  up(&mtx);
  return 0;
}


/* Se invoca al hacer read() de entrada /proc */ 
static ssize_t fifoproc_read(struct file *filp, char __user *buf, size_t len, loff_t *off)
{
   

     
      char kbuff[MAX_KBUF];

      
    
      /* Entrar a la sección crítica */
      if (down_interruptible(&mtx))
      {
      return -EINTR;
      }

     /* Bloquearse mientras buffer esté vacío */
      while (kfifo_is_empty(&unKFifo)  && prod_count > 0)
      {
      /* Incremento de consumidores esperando */
        nr_cons_waiting++;
        /* Liberar el 'mutex' antes de bloqueo*/
        up(&mtx);
        /* Bloqueo en cola de espera */   
        if (down_interruptible(&sem_cons)){ 
          down(&mtx);
          nr_cons_waiting--;
          up(&mtx);   
          return -EINTR;
        }
        if (down_interruptible(&mtx))
        {
          return -EINTR;
        }  
      }

     
      if(kfifo_is_empty(&unKFifo) && prod_count==0){
          up(&mtx);
          return 0;
      } 
        /* Obtener los elementos del buffer y eliminarlo */
      len=kfifo_out (&unKFifo, &kbuff, FIFO_SIZE); 
      printk("%d\n",len);
      /* Despertar a los productores bloqueados (si hay alguno) */
      if (nr_prod_waiting>0)
      {
      up(&sem_prod);  
      nr_prod_waiting--;
      }       

       /* Salir de la sección crítica */ 
      up(&mtx);


      if (copy_to_user(buf,kbuff,len)){
         return -EINVAL;
      }
      
      return len;
  }


/* Se invoca al hacer write() de entrada /proc */ 
static ssize_t fifoproc_write(struct file *flip, const char *buf, size_t len, loff_t *off)
{
  char kbuf[MAX_KBUF];
   
    
    
   /* if (len > MAX_CBUFFER_LEN || len > MAX_KBUF) {
      return -ENOSPC;
    }
   */
    if (copy_from_user( kbuf, buf, len )) {
      return -EFAULT;
    }
  
    /* Acceso a la sección crítica */
    if (down_interruptible(&mtx))
    {
    return -EINTR;
    }

    /* Bloquearse mientras no haya huecos en el buffer */
    while ( kfifo_is_full(&unKFifo) && cons_count >0 )
    {
      /* Incremento de productores esperando */
      nr_prod_waiting++;
      /* Liberar el 'mutex' antes de bloqueo*/
      up(&mtx);
      /* Bloqueo en cola de espera */   
      if (down_interruptible(&sem_prod)){
        down(&mtx);
        nr_prod_waiting--;
        up(&mtx); 
        return -EINTR;
      }
      if (down_interruptible(&mtx)){return -EINTR;} 
    }

    /* Detectar fin de comunicación por error (consumidor cierra FIFO antes) */ 
    if (cons_count==0) 
    {
      up(&mtx);
      return -EPIPE;
    } 
    
       /* Insertar en el buffer */
    kfifo_in(&unKFifo,&kbuf,len);


    /* Despertar a los consumidores bloqueados (si hay alguno) */
    if (nr_cons_waiting>0)
    {
      up(&sem_cons);  
      nr_cons_waiting--;
    }

    /* Salir de la sección crítica */
      up(&mtx);
    return len;
}


static const struct file_operations proc_entry_fops = {
    .read = fifoproc_read,
    .write = fifoproc_write, 
    .open = fifoproc_open,
    .release =  fifoproc_release,
};

/* Funciones de inicialización y descarga del módulo */ 
int init_cons_module(void){
  /* Inicialización del buffer */  
  /*cbuffer = create_cbuffer_t(MAX_CBUFFER_LEN);

  if (!cbuffer) {
    return -ENOMEM;
  }
  */
  /* Inicialización a 0 de los semáforos usados como colas de espera */
  sema_init(&sem_prod,0);
  sema_init(&sem_cons,0);

  /* Inicializacion a 1 del semáforo que permite acceso en exclusión mutua a la SC */
  sema_init(&mtx,1);

  nr_prod_waiting=nr_cons_waiting=0;

  proc_entry = proc_create_data("modfifo",0666, NULL, &proc_entry_fops, NULL);
    
  if (proc_entry == NULL) {
      kfifo_reset(&unKFifo);
      printk(KERN_INFO "fifomod: No puedo crear la entrada en proc\n");
      return  -ENOMEM;
  }
      
  printk(KERN_INFO "fifomod: Cargado el Modulo.\n");
  
  return 0;
}
void cleanup_cons_module(void){
  remove_proc_entry("modfifo", NULL);
  kfifo_reset(&unKFifo);
  printk(KERN_INFO "modfifo: Modulo descargado.\n");
}

module_init( init_cons_module );
module_exit( cleanup_cons_module );
